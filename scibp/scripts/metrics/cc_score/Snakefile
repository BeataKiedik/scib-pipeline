# ------------------------------------------------------------------------------
# Cell cycle score sanity check
# ------------------------------------------------------------------------------
rule cc_single:
    input:
        u      = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="file"),
        i      = rules.integration_run_python.output, # TODO: use function to distinguish R and python output
        script = "scripts/metrics/cc_score/cell_cycle_variance.py"
    output: cfg.ROOT / "{scenario}/cc_variance/{scaling}/{hvg}/{method}_{o_type}.csv"
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        organism  = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="organism"),
        assay     = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="assay"),
        hvgs      = lambda wildcards: cfg.get_feature_selection(wildcards.hvg),
        cmd       = f"conda run -n {cfg.py_env} python"
    shell:
        """
        {params.cmd} {input.script} -u {input.u} -i {input.i} -o {output} \
        -b {params.batch_key} --assay {params.assay} --type {wildcards.o_type} \
        --hvgs {params.hvgs} --organism {params.organism}
        """


cc_func, cc_wildcards = cfg.get_all_wildcards(type_="default", output_types=["full", "embed"])
rule cc_variation:
    input:
        tables = expand(rules.cc_single.output, cc_func, **cc_wildcards),
        script = "scripts/metrics/cc_score/merge_cc_variance.py"
    output: cfg.ROOT / "cc_variance.csv"
    params:
        cmd = f"conda run -n {cfg.py_env} python"
    shell: "{params.cmd} {input.script} -i {input.tables} -o {output} --root {cfg.ROOT}"
